/* {{{
This file is part of DPGSolver.

DPGSolver is free software: you can redistribute it and/or modify it under the terms of the GNU
General Public License as published by the Free Software Foundation, either version 3 of the
License, or any later version.

DPGSolver is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
Public License for more details.

You should have received a copy of the GNU General Public License along with DPGSolver.  If not, see
<http://www.gnu.org/licenses/>.
}}} */

#ifndef DPG__definitions_core_h__INCLUDED
#define DPG__definitions_core_h__INCLUDED
/** \file
 *  \brief Provides the definitions of core constants.
 */

///\{ \name The maximum number of dimensions
#define DMAX 3
///\}

#define PROJECT_SOURCE_DIR "@PROJECT_SOURCE_DIR@/"       ///< The CMake project source directory.
#define PROJECT_INPUT_DIR  "@PROJECT_SOURCE_DIR@/input/" ///< The base directory for input files.

#define DIM @BUILD_DIM@ ///< 'DIM'ension of this build. Must be passed as a CMake -D parameter.

#define NVAR_EULER (DIM+2) ///< 'N'umber of 'VAR'iables for the Euler/Navier-Stokes equations.
#define NEQ_EULER  (DIM+2) ///< 'N'umber of 'EQ'uations for the Euler/Navier-Stokes equations.

#define NVAR_BURGERS DIM ///< 'N'umber of 'VAR'iables for the Burgers equations.
#define NEQ_BURGERS  DIM ///< 'N'umber of 'EQ'quations for the Burgers equations.

///\{ \name Macros related to the DIM constant.
#if DIM == 1
	#define IF_DIM_GE_1(a) a
	#define IF_DIM_GE_2(a) /* a */
	#define IF_DIM_GE_3(a) /* a */
	#define SUM_DIM(a,b,c) ((a))
	#define ARRAY_DIM(a,b,c) { (a), }
	#define TENSOR_DIM(a0,a1,a2,b0,b1,b2,c0,c1,c2) { {(a0),}, }
	#define ARRAY_VAR(a,b,c,d,e) { (a), (b), (e), }
	#define TENSOR_VAR_DIM(a0,a1,a2,b0,b1,b2,c0,c1,c2,d0,d1,d2,e0,e1,e2) { {(a0),}, {(b0),}, {(e0),}, }
#elif DIM == 2
	#define IF_DIM_GE_1(a) a
	#define IF_DIM_GE_2(a) a
	#define IF_DIM_GE_3(a) /* a */
	#define SUM_DIM(a,b,c) ((a)+(b))
	#define ARRAY_DIM(a,b,c) { (a), (b), }
	#define TENSOR_DIM(a0,a1,a2,b0,b1,b2,c0,c1,c2) { {(a0),(a1),}, {(b0),(b1),}, }
	#define ARRAY_VAR(a,b,c,d,e) { (a), (b), (c), (e), }
	#define TENSOR_VAR_DIM(a0,a1,a2,b0,b1,b2,c0,c1,c2,d0,d1,d2,e0,e1,e2) { {(a0),(a1),}, {(b0),(b1),}, {(c0),(c1),}, {(e0),(e1),}, }
#elif DIM == 3
	#define IF_DIM_GE_1(a) a
	#define IF_DIM_GE_2(a) a
	#define IF_DIM_GE_3(a) a
	#define SUM_DIM(a,b,c) ((a)+(b)+(c))
	#define ARRAY_DIM(a,b,c) { (a), (b), (c), }
	#define TENSOR_DIM(a0,a1,a2,b0,b1,b2,c0,c1,c2) { {(a0),(a1),(a2),}, {(b0),(b1),(b2),}, {(c0),(c1),(c2),}, }
	#define ARRAY_VAR(a,b,c,d,e) { (a), (b), (c), (d), (e), }
	#define TENSOR_VAR_DIM(a0,a1,a2,b0,b1,b2,c0,c1,c2,d0,d1,d2,e0,e1,e2) { {(a0),(a1),(a2),}, {(b0),(b1),(b2),}, {(c0),(c1),(c2),}, {(d0),(d1),(d2),}, {(e0),(e1),(e2),}, }
#endif
///\}

#endif // DPG__definitions_core_h__INCLUDED
